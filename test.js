// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var assert, bscoords, i, t, vectors;

  assert = require('assert');

  bscoords = require('./lib/bscoords');

  vectors = [
    {
      req: {
        mcc: '257',
        mnc: '01',
        lac: '114',
        cid: '1384',
        net: 'gsm'
      },
      res: {
        google: {
          success: true
        },
        yandex_bs: {
          success: true
        },
        yandex_cell: {
          success: true
        },
        opencellid: {
          success: true
        },
        mozlocation: {
          success: true
        },
        mylnikov: {
          success: true
        }
      }
    }, {
      req: {
        mcc: '250',
        mnc: '99',
        lac: '13954',
        cid: '49373',
        net: 'gsm'
      },
      res: {
        google: {
          success: true
        },
        yandex_bs: {
          success: true
        },
        yandex_cell: {
          success: true
        },
        opencellid: {
          success: false
        },
        mozlocation: {
          success: false
        },
        mylnikov: {
          success: true
        }
      }
    }, {
      req: {
        mcc: '250',
        mnc: '02',
        lac: '3901',
        cid: '12518',
        net: 'gsm'
      },
      res: {
        google: {
          success: true
        },
        yandex_bs: {
          success: false
        },
        yandex_cell: {
          success: false
        },
        opencellid: {
          success: false
        },
        mozlocation: {
          success: false
        },
        mylnikov: {
          success: true
        }
      }
    }, {
      req: {
        mcc: '250',
        mnc: '01',
        lac: '3971',
        cid: '41254',
        net: 'gsm'
      },
      res: {
        google: {
          success: false
        },
        yandex_bs: {
          success: false
        },
        yandex_cell: {
          success: false
        },
        opencellid: {
          success: false
        },
        mozlocation: {
          success: false
        },
        mylnikov: {
          success: true
        }
      }
    }
  ];

  bscoords.init({
    openCellIDApiKey: '6b71f207-23b2-4252-92c5-457abc1f2d62',
    timeout: 5000
  });

  i = 0;

  t = setInterval(function() {
    var ii;
    ii = i++;
    bscoords.request(vectors[ii].req.mcc, vectors[ii].req.mnc, vectors[ii].req.lac, vectors[ii].req.cid, vectors[ii].req.net, function(err, coords) {
      var prov, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, results, testResult;
      console.log("Test vector #" + ii + "\n\nRequest:\n    MCC: " + vectors[ii].req.mcc + "\n    MNC: " + vectors[ii].req.mnc + "\n    LAC: " + vectors[ii].req.lac + "\n    CID: " + vectors[ii].req.cid + "\n    Net: " + vectors[ii].req.net + "\n\nResponse:\n    Google     : (" + ((ref = coords.google) != null ? ref.lat : void 0) + ", " + ((ref1 = coords.google) != null ? ref1.lon : void 0) + "); Error: " + (err != null ? (ref2 = err.google) != null ? ref2.message : void 0 : void 0) + "\n    Yandex BS  : (" + ((ref3 = coords.yandex_bs) != null ? ref3.lat : void 0) + ", " + ((ref4 = coords.yandex_bs) != null ? ref4.lon : void 0) + "); Error: " + (err != null ? (ref5 = err.yandex) != null ? ref5.message : void 0 : void 0) + "\n    Yandex Cell: (" + ((ref6 = coords.yandex_cell) != null ? ref6.lat : void 0) + ", " + ((ref7 = coords.yandex_cell) != null ? ref7.lon : void 0) + "); Error: " + (err != null ? (ref8 = err.yandex) != null ? ref8.message : void 0 : void 0) + "\n    OpenCellID : (" + ((ref9 = coords.opencellid) != null ? ref9.lat : void 0) + ", " + ((ref10 = coords.opencellid) != null ? ref10.lon : void 0) + "); Error: " + (err != null ? (ref11 = err.opencellid) != null ? ref11.message : void 0 : void 0) + "\n    mozLocation: (" + ((ref12 = coords.mozlocation) != null ? ref12.lat : void 0) + ", " + ((ref13 = coords.mozlocation) != null ? ref13.lon : void 0) + "); Error: " + (err != null ? (ref14 = err.mozlocation) != null ? ref14.message : void 0 : void 0) + "\n    Mylnikov   : (" + ((ref15 = coords.mylnikov) != null ? ref15.lat : void 0) + ", " + ((ref16 = coords.mylnikov) != null ? ref16.lon : void 0) + "); Error: " + (err != null ? (ref17 = err.mylnikov) != null ? ref17.message : void 0 : void 0) + "\n\n--------------------------------------------------\n");
      ref18 = vectors[ii].res;
      results = [];
      for (prov in ref18) {
        testResult = ref18[prov];
        if (testResult.success) {
          results.push(assert.equal(err != null ? err[prov] : void 0, void 0, "No error expected requesting {\n    MCC: `" + vectors[ii].req.mcc + "`\n    MNC: `" + vectors[ii].req.mnc + "`\n    LAC: `" + vectors[ii].req.lac + "`\n    CID: `" + vectors[ii].req.cid + "`\n    Net: `" + vectors[ii].req.net + "`\n} in `" + prov + "`"));
        } else {
          results.push(void 0);
        }
      }
      return results;
    });
    if (i >= vectors.length) {
      return clearInterval(t);
    }
  }, 3000);

}).call(this);
